//
// Shopping Cart Example with JavaScript
// This example demonstrates various data types, loops, and conditionals within a simple shopping cart scenario:

const products = [
  { id: 1, name: "Apple", price: 0.5, quantity: 0 },
  { id: 2, name: "Banana", price: 0.75, quantity: 0 },
  { id: 3, name: "Milk", price: 2.5, quantity: 0 },
];

function displayProducts() {
  const productList = document.getElementById("products");
  productList.innerHTML = "";

  for (const product of products) {
    const productItem = document.createElement("li");
    productItem.textContent = `${product.name} (${product.price.toFixed(2)}): ${product.quantity}`;
    const addButton = document.createElement("button");
    addButton.textContent = "Add";
    addButton.addEventListener("click", () => addToCart(product.id));
    productItem.appendChild(addButton);
    productList.appendChild(productItem);
  }
}

function addToCart(productId) {
  const product = products.find(product => product.id === productId);
  if (product) {
    product.quantity++;
    updateCartTotal();
  } else {
    alert("Product not found!");
  }
}

function updateCartTotal() {
  let total = 0;
  for (const product of products) {
    total += product.price * product.quantity;
  }
  const cartTotalElement = document.getElementById("cart-total");
  cartTotalElement.textContent = `Cart Total: $${total.toFixed(2)}`;
}

function removeItem(productId) {
  const product = products.find(product => product.id === productId);
  if (product && product.quantity > 0) {
    product.quantity--;
    updateCartTotal();
  } else {
    alert("Product not found or quantity is 0!");
  }
}

displayProducts();

// Example usage:
addToCart(2); // Add one banana
removeItem(1); // Remove one apple


//  JavaScript Basics: Interactive Quiz App
const questions = [
  { question: "What is the capital of France?", options: ["London", "Paris", "Berlin"], answer: 1 },
  { question: "What is the largest planet in our solar system?", options: ["Earth", "Jupiter", "Venus"], answer: 1 },
  { question: "What year did JavaScript launch?", options: ["1995", "2000", "2005"], answer: 0 },
];

let score = 0;
let currentQuestion = 0;

function showQuestion() {
  const questionElement = document.getElementById("question");
  questionElement.textContent = questions[currentQuestion].question;

  const optionsElement = document.getElementById("options");
  optionsElement.innerHTML = "";

  for (let i = 0; i < questions[currentQuestion].options.length; i++) {
    const optionButton = document.createElement("button");
    optionButton.textContent = questions[currentQuestion].options[i];
    optionButton.addEventListener("click", () => checkAnswer(i));
    optionsElement.appendChild(optionButton);
  }
}

function checkAnswer(selectedOption) {
  const correctAnswer = questions[currentQuestion].answer;
  if (selectedOption === correctAnswer) {
    score++;
    alert("Correct!");
  } else {
    alert("Incorrect. The correct answer is: " + questions[currentQuestion].options[correctAnswer]);
  }

  currentQuestion++;
  if (currentQuestion === questions.length) {
    showResults();
  } else {
    showQuestion();
  }
}

function showResults() {
  const resultsElement = document.getElementById("results");
  resultsElement.textContent = `You answered ${score} out of ${questions.length} questions correctly!`;
}

showQuestion();

// Generated by Microsoft Copilot

// Declare an array of fruits
var fruits = ["apple", "banana", "orange"];

// Access the first element of the array
console.log(fruits[0]); // apple

// Add a new element to the end of the array
fruits.push("grape");

// Remove the first element of the array
fruits.shift();

// Loop through the array and print each element
for (var i = 0; i < fruits.length; i++) {
  console.log(fruits[i]);
}

// Define a function that takes two numbers as parameters and returns their sum
function add(a, b) {
  return a + b;
}

// Call the function with 3 and 5 as arguments
var result = add(3, 5);

// Print the result
console.log(result); // 8

// Define an object that represents a person
var person = {
  name: "Alice",
  age: 25,
  greet: function() {
    // Use the this keyword to refer to the current object
    console.log("Hello, my name is " + this.name);
  }
};

// Access the properties of the object
console.log(person.name); // Alice
console.log(person.age); // 25

// Call the method of the object
person.greet(); // Hello, my name is Alice

// Declare a variable and assign a value
var age = 18;

// Check if the age is greater than or equal to 18
if (age >= 18) {
  // If true, print "You are an adult"
  console.log("You are an adult");
} else {
  // If false, print "You are a minor"
  console.log("You are a minor");
}

// Declare a variable and assign a value
var day = "Monday";

// Use a switch statement to check the value of the variable
switch (day) {
  // If the value is "Monday", print "First day of the week"
  case "Monday":
    console.log("First day of the week");
    break;
  // If the value is "Tuesday", print "Second day of the week"
  case "Tuesday":
    console.log("Second day of the week");
    break;
  // If the value is "Wednesday", print "Third day of the week"
  case "Wednesday":
    console.log("Third day of the week");
    break;
  // If the value is "Thursday", print "Fourth day of the week"
  case "Thursday":
    console.log("Fourth day of the week");
    break;
  // If the value is "Friday", print "Fifth day of the week"
  case "Friday":
    console.log("Fifth day of the week");
    break;
  // If the value is "Saturday" or "Sunday", print "Weekend"
  case "Saturday":
  case "Sunday":
    console.log("Weekend");
    break;
  // If the value is none of the above, print "Invalid day"
  default:
    console.log("Invalid day");
}

// Declare an array of numbers
var numbers = [1, 2, 3, 4, 5];

// Use a for loop to iterate over the array
for (var i = 0; i < numbers.length; i++) {
  // Print each element of the array
  console.log(numbers[i]);
}

// Declare a variable and assign a value
var count = 1;

// Use a while loop to repeat a block of code
while (count <= 10) {
  // Print the value of the variable
  console.log(count);
  // Increment the value of the variable by 1
  count++;
}

// Define a function expression that takes two parameters and returns their product
var multiply = function (x, y) {
  return x * y;
};

// Call the function with 2 and 3 as arguments and store the result in a variable
var result = multiply(2, 3);

// Print the result
console.log(result); // 6

// Code generated by https://chat.deepseek.com/coder DeepSeek Coder AI tool
// 
let data = [
  { id: 1, name: 'John Doe', email: 'john@example.com' },
  { id: 2, name: 'Jane Doe', email: 'jane@example.com' },
];

// Create
function create(newData) {
  data.push(newData);
}

// Read
function read(id) {
  return data.find(item => item.id === id);
}

// Update
function update(id, updatedData) {
  let item = data.find(item => item.id === id);
  if (item) {
    Object.assign(item, updatedData);
  }
}

// Delete
function deleteItem(id) {
  let index = data.findIndex(item => item.id === id);
  if (index !== -1) {
    data.splice(index, 1);
  }
}

// Usage
create({ id: 3, name: 'Bob Smith', email: 'bob@example.com' });
console.log(read(3)); // { id: 3, name: 'Bob Smith', email: 'bob@example.com' }
update(3, { name: 'Robert Smith' });
console.log(read(3)); // { id: 3, name: 'Robert Smith', email: 'bob@example.com' }
deleteItem(3);
console.log(read(3)); // undefined

// JSONPlaceholder API, which is a simple fake REST API for testing and prototyping.

// Base URL for the JSONPlaceholder API
const apiUrl = 'https://jsonplaceholder.typicode.com';

// Headers for API requests
const headers = {
  'Content-Type': 'application/json; charset=UTF-8'
};

// Function to get all resources
async function getAllResources() {
  try {
    const response = await fetch(`${apiUrl}/posts`);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching resources:', error);
  }
}

// Function to get a single resource by ID
async function getResourceById(id) {
  try {
    const response = await fetch(`${apiUrl}/posts/${id}`);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching resource:', error);
  }
}

// Function to create a new resource
async function createResource(newResource) {
  try {
    const response = await fetch(`${apiUrl}/posts`, {
      method: 'POST',
      headers,
      body: JSON.stringify(newResource)
    });
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error creating resource:', error);
  }
}

// Function to update a resource
async function updateResource(id, updatedResource) {
  try {
    const response = await fetch(`${apiUrl}/posts/${id}`, {
      method: 'PUT',
      headers,
      body: JSON.stringify(updatedResource)
    });
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error updating resource:', error);
  }
}

// Function to delete a resource
async function deleteResource(id) {
  try {
    const response = await fetch(`${apiUrl}/posts/${id}`, {
      method: 'DELETE',
      headers
    });
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error deleting resource:', error);
  }
}

// Example usage
(async () => {
  // Create a new resource
  const newPost = {
    title: 'New Post',
    body: 'This is a new post.',
    userId: 1
  };
  const createdPost = await createResource(newPost);
  console.log('Created Post:', createdPost);

  // Get all resources
  const allPosts = await getAllResources();
  console.log('All Posts:', allPosts);

  // Get a single resource by ID
  const postById = await getResourceById(1);
  console.log('Post by ID:', postById);

  // Update a resource
  const updatedPost = {
    title: 'Updated Post',
    body: 'This post has been updated.',
    userId: 1
  };
  const updated = await updateResource(1, updatedPost);
  console.log('Updated Post:', updated);

  // Delete a resource
  const deleted = await deleteResource(1);
  console.log('Deleted Post:', deleted);
})();

// Base URL for the JSONPlaceholder API
const apiUrl = 'https://jsonplaceholder.typicode.com';

// Function to login and get a token
async function login(username, password) {
  try {
    // In a real-world application, you would send the username and password to the server
    // and receive a token in response. For this example, we'll just simulate this process.
    const token = 'fake-token';
    return token;
  } catch (error) {
    console.error('Error logging in:', error);
  }
}

// Function to perform an authenticated request
async function authenticatedRequest(url, method, body, token) {
  try {
    const headers = {
      'Content-Type': 'application/json; charset=UTF-8',
      'Authorization': `Bearer ${token}` // Include the token in the Authorization header
    };

    const response = await fetch(url, {
      method,
      headers,
      body: JSON.stringify(body)
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error performing authenticated request:', error);
  }
}

// Example usage
(async () => {
  // Login to get a token
  const token = await login('username', 'password');

  // Perform an authenticated request
  const newPost = {
    title: 'New Post',
    body: 'This is a new post.',
    userId: 1
  };
  const createdPost = await authenticatedRequest(`${apiUrl}/posts`, 'POST', newPost, token);
  console.log('Created Post:', createdPost);
})();
